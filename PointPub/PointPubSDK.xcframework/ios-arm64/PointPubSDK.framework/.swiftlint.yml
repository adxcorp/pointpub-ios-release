disabled_rules: #사용하지 않는 룰

    # default 룰들 중 사용하지 않는 규칙
    #kvo 사용시 block형태로 사용 https://realm.github.io/SwiftLint/block_based_kvo.html
    - block_based_kvo
    
    # enum의 case이름은 겹치면 안됨 https://realm.github.io/SwiftLint/duplicate_enum_cases.html
    - duplicate_enum_cases
    
    # enum의 아규먼트가 없을경우 비운다 https://realm.github.io/SwiftLint/empty_enum_arguments.html
    - empty_enum_arguments # new
        
    # 두개이상의 클로저를 사용할땐 후행형태를 사용하지 않는다 https://realm.github.io/SwiftLint/multiple_closures_with_trailing_closure.html
    - multiple_closures_with_trailing_closure
    
    # 옵저버는 디인잇에서 제거해야합니다. https://realm.github.io/SwiftLint/notification_center_detachment.html
    - notification_center_detachment # new
        
    # file의 맨 마지막에는 newline이 있어야합니다. https://realm.github.io/SwiftLint/trailing_newline.html
    - trailing_newline
    
    # xctfail에는 메세지가 있어야 합니다. https://realm.github.io/SwiftLint/xctfail_message.html
    - xctfail_message # new
    
    # https://realm.github.io/SwiftLint/trailing_whitespace.html
    - trailing_whitespace
    
    # https://realm.github.io/SwiftLint/switch_case_alignment.html
    - switch_case_alignment

    # 식별자는 인종, 성별 또는 사회경제적 지위에 따른 집단에 대한 차별을 피하는 포괄적인 언어를 사용해야 한다. https://realm.github.io/SwiftLint/inclusive_language.html
    - inclusive_language
    
    # extension에는 ACL이 붙지않습니다. https://realm.github.io/SwiftLint/no_extension_access_modifier.html
    - no_extension_access_modifier # new
    
    # 아래는 opt-in룰이기 때문에 추후 사용시 opt-in룰로 이동 필요함
    # count > 0 대신 isEmpty사용 https://realm.github.io/SwiftLint/empty_count.html
    - empty_count
    
    # outlet은 private로 해야합니다. https://realm.github.io/SwiftLint/private_outlet.html
    - private_outlet
        
    # 아래는 default룰이기 때문에 추후 사용시 disabled에서 삭제만 해주면 됨
    # 현재 사용 시 에러 발생해서 빌드가 안돼서 일시적으로 disable처리
    
    # 변수나 클래스등 이름은 소문자, 대문자로 시작하며 너무길거나 짧으면 안됩니다. https://realm.github.io/SwiftLint/identifier_name.html
    - identifier_name # new
    
    # 함수안은 복잡하면 안된다 https://realm.github.io/SwiftLint/cyclomatic_complexity.html
    - cyclomatic_complexity
    
    # 클로저 바디 길이 제한 기본 20 경고, 100 에러 https://realm.github.io/SwiftLint/closure_body_length.html
    - closure_body_length
    
    # tuple의 갯수를 제한합니다 https://realm.github.io/SwiftLint/large_tuple.html
    - large_tuple
    
    # 함수의 파라미터 갯수를 제한합니다. https://realm.github.io/SwiftLint/function_parameter_count.html
    - function_parameter_count
    
    - file_name
    - type_name
    - shorthand_operator
    - redundant_string_enum_value
    - for_where
    - todo
    - attributes
    - nesting
    - file_length
    - function_body_length
    - type_body_length
 
# 사용하는 룰(default 룰 제외, opt-in rule 중 추가하고 싶은 규칙들을 여기에 작성합니다.)
# default 룰은 다음의 링크에서 확인 가능합니다. https://realm.github.io/SwiftLint/rule-directory.html
analyzer_rules:

    # 사용하지 않는 import는 제거 합니다. https://realm.github.io/SwiftLint/unused_import.html
    - unused_import
    
    # 선언된 변수는 최소 한 번은 사용돼야합니다. https://realm.github.io/SwiftLint/unused_declaration.html
    - unused_declaration
    
opt_in_rules:

    # force unwrapping을 하지 않습니다. https://realm.github.io/SwiftLint/force_unwrapping.html
    - force_unwrapping

    # image, color liternaldl 아닌 named로 사용하도록 함 https://realm.github.io/SwiftLint/discouraged_object_literal.html
    - discouraged_object_literal
    
    # file이름이 파일안의 extension이나 타입과 일치해야합니다. https://realm.github.io/SwiftLint/file_name.html
    - file_name # new
    
    # modifier들은 순서를 가집니다 https://realm.github.io/SwiftLint/modifier_order.html
    - modifier_order #new
    
    #collection들의 버티컬 위치가 일치해야합니다 https://realm.github.io/SwiftLint/collection_alignment.html
    - collection_alignment #new
    
    #filter.count를 사용할때 0을 포함하면 안됨 contain을 사용하자 https://realm.github.io/SwiftLint/contains_over_filter_count.html
    - contains_over_filter_count #new
    
    #filter.count를 사용할때 empty를 사용하면 안됨 contain을 사용하자 https://realm.github.io/SwiftLint/contains_over_filter_is_empty.html
    - contains_over_filter_is_empty #new

    # super를 콜해야하는경우 super를 콜해야합니다. https://realm.github.io/SwiftLint/overridden_super_call.html
    - overridden_super_call
        
    #map에서 $0만 사용하거나 element보단 $ 사용하도록 유도 https://realm.github.io/SwiftLint/array_init.html
    - array_init
    
    #@objc, @IBoutlet 에 엔터키 안하고 바로 붙여쓰도록 함 https://realm.github.io/SwiftLint/attributes.html
    - attributes
        
    #클로저의 내용과 괄호사이엔 공백이 있어야합니다. https://realm.github.io/SwiftLint/closure_spacing.html
    - closure_spacing #new
    
    #first를 사용하고 != nil체크를 하지말고 contain을 사용하자 https://realm.github.io/SwiftLint/contains_over_first_not_nil.html
    - contains_over_first_not_nil #new
    
    #range를 사용하고 nil체크를 하지말고 contain을 사용하자 https://realm.github.io/SwiftLint/contains_over_range_nil_comparison.html
    - contains_over_range_nil_comparison #new
    
    #static변수만 가지고 있을 경우 enum타입으로 만들고 상속받은경우 class를 사용하도록 함 https://realm.github.io/SwiftLint/convenience_type.html
    - convenience_type
    
    # 빈 collection체크시에는 .isEmpty 사용 https://realm.github.io/SwiftLint/empty_collection_literal.html
    - empty_collection_literal
    
    # string 빈문자열 체크시 "" 대신 isempty를 사용한다 https://realm.github.io/SwiftLint/empty_string.html
    - empty_string
    
    # fatal error는 메세지가 있어야합니다 https://realm.github.io/SwiftLint/fatal_error_message.html
    - fatal_error_message
    
    # file이름엔 공백이 있으면 안됩니다. https://realm.github.io/SwiftLint/file_name_no_space.html
    - file_name_no_space # new
    
    # filter.first보단 .first(where:)를 사용하도록 합니다. (속도향상) https://realm.github.io/SwiftLint/first_where.html
    - first_where # new
    
    # map과 reduce([],+)보단 flatmap을 사용하도록 합니다. (속도향상) https://realm.github.io/SwiftLint/flatmap_over_map_reduce.html
    - flatmap_over_map_reduce # new
    
    # 같은걸 비교하면 안됩니다. https://realm.github.io/SwiftLint/identical_operands.html
    - identical_operands # new
    
    # 변수 선언시 ! 로 선언하지 않습니다 https://realm.github.io/SwiftLint/implicitly_unwrapped_optional.html
    - implicitly_unwrapped_optional
    
    # joined(↓separator: "") 기본값일 경우 joint()로 사용합니다 https://realm.github.io/SwiftLint/joined_default_parameter.html
    - joined_default_parameter # new
    
    # .filter { }.last대신 .last(where:)를 사용합니다 https://realm.github.io/SwiftLint/last_where.html
    - last_where # new
    
    # 리터럴들을 표현할때 인덴트가 일치해야합니다 https://realm.github.io/SwiftLint/literal_expression_end_indentation.html
    - literal_expression_end_indentation
    
    # 하위의 접근제어는 상위의 접근제어보다 낮아야 합니다 (같아도 안됨) https://realm.github.io/SwiftLint/lower_acl_than_parent.html
    - lower_acl_than_parent # new

    # 파라미터들도 한줄에 있거나 따로 있어야 합니다. https://realm.github.io/SwiftLint/multiline_parameters.html
    - multiline_parameters
    
    # toNot(equal: 대신 줄여서 != 나 toNotEqual와 함수를 같이 만들어서 사용합니다. https://realm.github.io/SwiftLint/nimble_operator.html
    - nimble_operator # new

    # 10진수일때 4자리마다 _로 구분합니다. https://realm.github.io/SwiftLint/number_separator.html
    - number_separator # new

    # operation 사용시 양옆에 공백이 있어야 합니다. https://realm.github.io/SwiftLint/operator_whitespace.html
    - operator_usage_whitespace
    
    # enum case에서 옵셔널을 사용하지 않습니다. https://realm.github.io/SwiftLint/optional_enum_case_matching.html
    - optional_enum_case_matching

    # extension 안에는 override 하지 않습니다. https://realm.github.io/SwiftLint/override_in_extension.html
    - override_in_extension
    
    # pattern이 같을경우 앞으로 빼서 일치 시킵니다. https://realm.github.io/SwiftLint/pattern_matching_keywords.html
    - pattern_matching_keywords
    
    # typeof self 대신 Self 를 사용합니다. https://realm.github.io/SwiftLint/prefer_self_type_over_type_of_self.html
    - prefer_self_type_over_type_of_self # new
    
    # action은 private로 해야합니다. https://realm.github.io/SwiftLint/private_action.html
    - private_action # new

    # 일부 메서드들은 super를 호출 하면 안됩니다. https://realm.github.io/SwiftLint/prohibited_super_call.html
    - prohibited_super_call

    # copy on write type의 경우 reduce (_ : _ :)보다 reduce (into : _ :)를 선호합니다. https://realm.github.io/SwiftLint/reduce_into.html
    - reduce_into # new
    
    # nil coalescing operator는 왼쪽이 nil인지 판단한뒤 값을 대신 사용해야합니다 nil로 사용하지 않습니다. https://realm.github.io/SwiftLint/redundant_nil_coalescing.html
    - redundant_nil_coalescing

    # sorted().first, sorted().last보다 min() 또는 max()를 사용하는 것이 좋습니다. https://realm.github.io/SwiftLint/sorted_first_last.html
    - sorted_first_last
    
    # 연산자 함수는 static함수로 만들어야 합니다. https://realm.github.io/SwiftLint/static_operator.html
    - static_operator
    
    # case와 return은 한줄에 있으면 안됩니다. https://realm.github.io/SwiftLint/switch_case_on_newline.html
    - switch_case_on_newline # new
    
    # someBool = !someBool.대신에 toggle()을 활용합니다.
    - toggle_bool # new

    # 클로저 인수를 선언 할 때는 괄호가 필요하지 않습니다. https://realm.github.io/SwiftLint/unneeded_parentheses_in_closure_argument.html
    - unneeded_parentheses_in_closure_argument # new
 
    # 닫는 괄호 앞에는 공백이 있으면 안됩니다. https://realm.github.io/SwiftLint/vertical_whitespace_closing_braces.html
    - vertical_whitespace_closing_braces # new

    # delegate는 weak로 합니다. https://realm.github.io/SwiftLint/weak_delegate.html
    - weak_delegate # new
    
    # 비교 할 때 변수는 왼쪽 상수는 오른쪽에 있어야 합니다. https://realm.github.io/SwiftLint/yoda_condition.html
    - yoda_condition
    
# Options
line_length: 300
force_cast: warning
force_try: warning

excluded: # SwiftLint 검사에서 제외할 파일 경로
    - PointPubSDKTests

reporter: "xcode"
